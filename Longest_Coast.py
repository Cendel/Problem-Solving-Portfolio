# Question: https://www.codingame.com/ide/puzzle/longest-coast

# Completed!

n = 6
grid = [
    "##~##~#~####~~~#~#~~~##~~##~~~#~~##~####~#~~~~~~~~",
    "##~~~##~#~###~#~###~~##~#~####~#~#~##~#~~#~~#~###~",
    "~##~#~~~##~~~~#~#~#~#~~##~######~###~##~~##~###~~#",
    "#~~###~~~#~#####~~~#~#~~###~##~~~#~~~~~#~~#~##~###",
    "~~##~#~##~#~~##~#~###~##~#~#~#~###~#~~~~###~####~#",
    "####~##~~~##~~#~###~##~##~#~###~#~#~~~##~##~##~~##",
    "~#~#~~~#~~#~~##~#~######~#~#~~###~#~~~~###~~~#~#~#",
    "~#~##~~~~~#~~###~##~~~~##~#~##~#~~####~###~~~~~##~",
    "##~###~~#~##~##~~~##~~#####~##~~#~#~~####~~~#~##~#",
    "~~~##~####~~##~#~~###~~~~~~#~#~~~##~#~#~###~##~~~#",
    "###~~#~~~~###~~#~####~##~#~~###~##~~~~###~#~#~#~#~",
    "~#~#~##~#~####~#######~###~~~~##~####~~~~~##~~#~#~",
    "~~##~~~##~~~~#~~#~###~~#~~###~~#~###~~#######~~~~~",
    "#~~##~~#~~#~#~~#~~~#~~###~~~####~~##~#~#~#~~###~##",
    "######~###~#~~##~~~#####~~##~##~~~~~#~#~~~~#~~~#~#",
    "#~#~#~~#~~##~#~#~~~~~##~#~###~~#~~~~##~####~~#~~#~",
    "~~#~##~#~~#~##~#~~~~~#~~##~~~~#~~~#~###~###~######",
    "###~####~##~~##~~#~###~~##~#~#~~~#~~~~#~~~#~~~~~#~",
    "~~#~~#~##~~####~~~~~~~######~#####~~~~~~#####~~#~#",
    "##~##~~~##~~~######~#~###~~~~#~~#~~#~####~###~#~##",
    "~###~#~~#~#~~~~~~##~#~###~~~#~#~#####~~~~#~#~~#~~~",
    "####~~~~##~##~~~##~~~~#~##~#~##~~~~~##~~###~##~##~",
    "#~~~~###~##~~#~~#~#~~##~##~#~##~~~###~~~~~~###~##~",
    "~~~#~#~~~####~~####~#~###~~#~~~~##~~~~########~~#~",
    "####~~~~~~~~##~#~#######~#~####~#~##~###~~~~###~##",
    "#~#~##~##~~##~~#~##~##~#~~~#~~~###~~~~~#~~#~~~###~",
    "###~#~#~#~~#~#######~~#~~~~#~##~##~#~~~#~~###~##~~",
    "~###~#~#~~#~########~##~~####~##~~~~~~###~#~~#~~##",
    "~#~~###~####~####~~~~#~~#~#~~##~~~##~~##~#~~##~#~#",
    "~~#~~~##~~##~###~~~~#~##~##~~~~###~###~~~~#~~#~~#~",
    "~#~##~##~#~#~#~###~##~#####~~###~##~~#~######~~##~",
    "~#~~#~~~~~~~#~#~~#~~~~~#~~~###~###~~#~~~##~~~#~~~#",
    "#~#~#####~~##~#~##~~~##~##~~##~######~##~#~~#~##~#",
    "~~#~#~~##~#~~##~~#~#####~~~######~~~~#~##~#~####~~",
    "~~~~~####~##~~#~#~####~#~~##~~~~~~#~~~#######~~#~~",
    "###~~~##~~~##~##~##~~#~#~~###~~#~~#~#~#~~###~#~~##",
    "###~~#~~#~##~~~#~~#~####~~#####~~~#~~~#~~##~~~###~",
    "##~#~~##~#~~~~#~#~~##~####~##~~~#~##~#~#~#####~###",
    "#~~~##~~~##~~#~##~~~#~~#~#~~#~~~~#~~####~~~~~#~##~",
    "##~~#~#~#~##~##~##~#~~~~#~#~#~~~###~~~##~###~#~##~",
    "~~########~#~#~###~##~~~~~~###~~~~#~##~##~##~##~~~",
    "~~#~#~#~##~#~~#~~##~#~~##~##~~#~~###########~~~#~#",
    "~~#~##~~~#~#~~~###~#####~~#~#~#~~~~~~##~~~##~#~#~~",
    "~###~~####~~#~#~#~~##~###~~##~#~##~##~~~######~#~#",
    "~#~##~###~~#~##~~~~#~##~##~~~##~#~~##~~~~#######~~",
    "~~#~##~~~#~~#~#~#~#####~~###~~####~##~~~#~~#~#~#~#",
    "~#~~~###~###~~~~~~#~####~##~~#~~~~###~~~#~#~#~##~#",
    "~~#~#~~~~~##~#~~~~~##~###~~~~####~~~~~~######~~~~#",
    "#~~~~#~~#~##~#~#~~~##~##~~~#~##~###~##~~#~#~###~##",
    "####~~###~###~#~##~##~####~##~##~~~###~~##~~~#~#~#",
] 


for i in grid:
    print(i)

islands = []
island_groups = []
sea_sets = []


def check_sea(grid, a, b, sea_set):
    if b < n - 1 and grid[a][b + 1] == "~":
        sea_set.add((a, b + 1))
    if a < n - 1 and grid[a + 1][b] == "~":
        sea_set.add((a + 1, b))
    if b > 0 and grid[a][b - 1] == "~":
        sea_set.add((a, b - 1))
    if a > 0 and grid[a - 1][b] == "~":
        sea_set.add((a - 1, b))
    return sea_set


def check_for_island(grid, a, b, island_group, sea_set):
    island_group.append([a, b])
    while True:
        sea_set = check_sea(grid, a, b, sea_set)
        if b < n - 1 and grid[a][b + 1] == "#" and [a, b + 1] not in islands:
            islands.append([a, b + 1])
            check_for_island(grid, a, b + 1, island_group, sea_set)
        elif a < n - 1 and grid[a + 1][b] == "#" and [a + 1, b] not in islands:
            islands.append([a + 1, b])
            check_for_island(grid, a + 1, b, island_group, sea_set)
        elif b > 0 and grid[a][b - 1] == "#" and [a, b - 1] not in islands:
            islands.append([a, b - 1])
            check_for_island(grid, a, b - 1, island_group, sea_set)
        elif a > 0 and grid[a - 1][b] == "#" and [a - 1, b] not in islands:
            islands.append([a - 1, b])
            check_for_island(grid, a - 1, b, island_group, sea_set)
        else:
            break


for i in range(n):
    for j in range(n):
        if grid[i][j] == "#" and [i, j] not in islands:
            islands.append([i, j])
            check = True
            island_group = []
            sea_set = set()
            while check:
                check = check_for_island(grid, i, j, island_group, sea_set)
            island_groups.append(island_group)
            sea_sets.append(sea_set)


sea_count = 0
index = 0
for i in sea_sets:
    if len(i) > sea_count:
        sea_count = len(i)
        index = sea_sets.index(i)

print(f"The {index+1}. island has {sea_count} sea blocks.")
